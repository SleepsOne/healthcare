// user-ui/js/components/appointments.js
import { api } from '../api.js';

export async function render() {
  const app = document.getElementById('app');
  if (!app) {
    console.error('Không tìm thấy element #app');
    return;
  }

  app.innerHTML = `
    <section class="card">
      <div class="card-header">
        <h2>Lịch hẹn của bạn</h2>
        <button id="newAppointmentBtn" class="btn">Đặt lịch mới</button>
      </div>
      <div class="table-responsive">
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Ngày giờ</th>
              <th>Bác sĩ</th>
              <th>Chuyên khoa</th>
              <th>Trạng thái</th>
              <th>Thao tác</th>
            </tr>
          </thead>
          <tbody id="list"></tbody>
        </table>
      </div>
    </section>

    <!-- Modal đặt lịch -->
    <div id="appointmentModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Đặt lịch hẹn mới</h3>
        <form id="appointmentForm">
          <div class="form-group">
            <label for="doctorId">Bác sĩ</label>
            <select id="doctorId" required>
              <option value="">Chọn bác sĩ</option>
            </select>
          </div>
          <div class="form-group">
            <label for="scheduledAt">Ngày giờ hẹn</label>
            <input id="scheduledAt" type="datetime-local" required>
          </div>
          <div class="form-group">
            <label for="reason">Lý do khám</label>
            <textarea id="reason" rows="3" required></textarea>
          </div>
          <button type="submit" class="btn">Đặt lịch</button>
        </form>
      </div>
    </div>
  `;

  // Đợi DOM được render xong
  await new Promise(resolve => setTimeout(resolve, 0));

  // Load danh sách lịch hẹn
  const list = document.getElementById('list');
  if (!list) {
    console.error('Không tìm thấy element #list');
    return;
  }

  try {
    const appointments = await api.getAppointments();
    for (const a of appointments) {
      try {
        // Lấy thông tin bác sĩ
        const doctor = await api.getDoctor(a.doctor_id);
        // Lấy thông tin user của bác sĩ từ user service
        const doctorUser = await api.getUserById(doctor.user_id);
        
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${a.id}</td>
          <td>${new Date(a.scheduled_at).toLocaleString('vi-VN', { dateStyle: 'short', timeStyle: 'short' })}</td>
          <td>${doctorUser.full_name}</td>
          <td>${doctor.specialty}</td>
          <td><span class="status ${a.status}">${a.status}</span></td>
          <td>
            ${a.status === 'pending' ? 
              `<button class="btn btn-sm btn-danger" onclick="cancelAppointment(${a.id})">Hủy</button>` : 
              ''}
          </td>
        `;
        list.append(tr);
      } catch (err) {
        console.error(`Lỗi khi tải thông tin lịch hẹn ${a.id}:`, err);
        // Vẫn hiển thị lịch hẹn với thông tin cơ bản
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${a.id}</td>
          <td>${new Date(a.scheduled_at).toLocaleString('vi-VN', { dateStyle: 'short', timeStyle: 'short' })}</td>
          <td>Đang tải...</td>
          <td>Đang tải...</td>
          <td><span class="status ${a.status}">${a.status}</span></td>
          <td>
            ${a.status === 'pending' ? 
              `<button class="btn btn-sm btn-danger" onclick="cancelAppointment(${a.id})">Hủy</button>` : 
              ''}
          </td>
        `;
        list.append(tr);
      }
    }
  } catch (err) {
    app.innerHTML = `
      <div class="alert alert-error">
        <p>Không thể tải lịch hẹn: ${err.message}</p>
        <button class="btn" onclick="window.location.reload()">Thử lại</button>
      </div>
    `;
    return;
  }

  // Xử lý modal đặt lịch
  const modal = document.getElementById('appointmentModal');
  const btn = document.getElementById('newAppointmentBtn');
  const span = document.getElementsByClassName('close')[0];

  if (!modal || !btn || !span) {
    console.error('Không tìm thấy các element của modal');
    return;
  }

  btn.onclick = () => {
    modal.style.display = 'block';
    loadDoctors();
  };

  span.onclick = () => {
    modal.style.display = 'none';
  };

  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = 'none';
    }
  };

  // Load danh sách bác sĩ
  async function loadDoctors() {
    const select = document.getElementById('doctorId');
    if (!select) {
      console.error('Không tìm thấy element #doctorId');
      return;
    }

    try {
      const doctors = await api.getDoctors();
      select.innerHTML = '<option value="">Chọn bác sĩ</option>';
      
      // Lấy thông tin user cho từng bác sĩ
      for (const doctor of doctors) {
        try {
          // Lấy thông tin user của bác sĩ từ user service
          const doctorUser = await api.getUserById(doctor.user_id);
          const option = document.createElement('option');
          option.value = doctor.id;
          option.textContent = `${doctorUser.full_name} - ${doctor.specialty}`;
          select.appendChild(option);
        } catch (err) {
          console.error(`Lỗi khi tải thông tin bác sĩ ${doctor.id}:`, err);
          // Vẫn hiển thị bác sĩ với thông tin cơ bản
          const option = document.createElement('option');
          option.value = doctor.id;
          option.textContent = `Bác sĩ #${doctor.id} - ${doctor.specialty}`;
          select.appendChild(option);
        }
      }
    } catch (err) {
      alert('Không thể tải danh sách bác sĩ: ' + err.message);
    }
  }

  // Xử lý đặt lịch
  const form = document.getElementById('appointmentForm');
  if (!form) {
    console.error('Không tìm thấy element #appointmentForm');
    return;
  }

  form.onsubmit = async (e) => {
    e.preventDefault();
    
    const doctorId = document.getElementById('doctorId')?.value;
    const scheduledAt = document.getElementById('scheduledAt')?.value;
    const reason = document.getElementById('reason')?.value;

    if (!doctorId || !scheduledAt || !reason) {
      alert('Vui lòng điền đầy đủ thông tin');
      return;
    }

    try {
      // Lấy thông tin bệnh nhân hiện tại
      const patient = await api.getCurrentPatient();
      
      await api.createAppointment({
        doctor_id: parseInt(doctorId),
        patient_id: patient.id,
        scheduled_at: scheduledAt,
        reason: reason,
        status: 'pending'
      });
      
      modal.style.display = 'none';
      form.reset();
      render(); // Reload danh sách
    } catch (err) {
      alert('Không thể đặt lịch: ' + err.message);
    }
  };
}

window.cancelAppointment = async (id) => {
  if (!confirm('Bạn có chắc muốn hủy lịch hẹn này?')) return;
  try {
    // patch only the status field
    await api.patchAppointment(id, { status: 'cancelled' });
    render(); 
  } catch (err) {
    alert('Không thể hủy lịch hẹn: ' + err.message);
  }
};
// user-ui/js/components/auth.js
import { api } from '../api.js';

/**
 * Hiển thị form đăng nhập
 */
export function renderLogin() {
  const app = document.getElementById('app');
  app.innerHTML = `
    <section class="card">
      <h2>Đăng nhập</h2>
      <div class="form-group">
        <label for="username">Tên đăng nhập</label>
        <input id="username" type="text" placeholder="Nhập tên đăng nhập" />
      </div>
      <div class="form-group">
        <label for="password">Mật khẩu</label>
        <input id="password" type="password" placeholder="Nhập mật khẩu" />
      </div>
      <button id="btnLogin" class="btn">Đăng nhập</button>
      <p class="message" id="msg"></p>
    </section>
  `;

  document.getElementById('btnLogin').onclick = async () => {
    const u = document.getElementById('username').value.trim();
    const p = document.getElementById('password').value;
    try {
      const data = await api.token({ username: u, password: p });
      localStorage.setItem('accessToken', data.access);
      localStorage.setItem('refreshToken', data.refresh);
      window.location.hash = '/profile';
    } catch (err) {
      const msgEl = document.getElementById('msg');
      msgEl.textContent = 'Lỗi đăng nhập: ' + err.message;
      msgEl.classList.add('error');
    }
  };
}

/**
 * Hiển thị form đăng ký
 */
export function renderRegister() {
  const app = document.getElementById('app');
  app.innerHTML = `
    <section class="card">
      <h2>Đăng ký</h2>
      <div class="form-group">
        <label for="username">Tên đăng nhập</label>
        <input id="username" type="text" placeholder="Chọn tên đăng nhập" />
      </div>
      <div class="form-group">
        <label for="password">Mật khẩu</label>
        <input id="password" type="password" placeholder="Nhập mật khẩu" />
      </div>
      <div class="form-group">
        <label for="confirmPassword">Xác nhận mật khẩu</label>
        <input id="confirmPassword" type="password" placeholder="Nhập lại mật khẩu" />
      </div>
      <div class="form-group">
        <label for="email">Email</label>
        <input id="email" type="email" placeholder="Nhập email" />
      </div>
      <div class="form-group">
        <label for="fullName">Họ và tên</label>
        <input id="fullName" type="text" placeholder="Nhập họ và tên" />
      </div>
      <button id="btnRegister" class="btn">Đăng ký</button>
      <p class="message" id="msg"></p>
    </section>
  `;

  document.getElementById('btnRegister').onclick = async () => {
    // … collect username, password, email, fullName …

    try {
      // 1) create the user
      const userData = { username, password, email, full_name: fullName };
      const newUser = await api.createUser(userData);

      // 2) immediately create a patient record for them
      await api.createPatient({
        user_id: newUser.id,
        full_name: fullName,
        medical_record: '',  // or generate on backend
        dob: null,
        address: '',
        phone: ''
      });

      // then send them to login
      window.location.hash = '/login';
    } catch (err) {
      const msgEl = document.getElementById('msg');
      msgEl.textContent = 'Lỗi đăng ký: ' + err.message;
      msgEl.classList.add('error');
    }
  };
}

function handleLogout() {
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
  window.location.hash = '/login';
}

// user-ui/js/components/orders.js
import { api } from '../api.js';

export async function render() {
  const app = document.getElementById('app');
  app.innerHTML = `
    <section class="card">
      <h2>Đơn hàng của bạn</h2>
      <div class="table-responsive">
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Ngày tạo</th>
              <th>Trạng thái</th>
              <th>Thao tác</th>
            </tr>
          </thead>
          <tbody id="list"></tbody>
        </table>
      </div>
    </section>

    <!-- Modal chi tiết đơn hàng -->
    <div id="orderModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Chi tiết đơn hàng</h3>
        <div id="orderDetails"></div>
      </div>
    </div>
  `;

  const list = document.getElementById('list');
  try {
    const orders = await api.getOrders();
    orders.forEach(o => {
      const tr = document.createElement('tr');
      const date = o.created_at ? new Date(o.created_at) : new Date();
      tr.innerHTML = `
        <td>${o.id}</td>
        <td>${date.toLocaleDateString('vi-VN')}</td>
        <td><span class="status ${o.status}">${o.status}</span></td>
        <td>
          <button class="btn btn-sm" onclick="viewOrderDetails(${o.id})">Chi tiết</button>
          ${o.status === 'pending' ? 
            `<button class="btn btn-sm btn-danger" onclick="cancelOrder(${o.id})">Hủy</button>` : 
            ''}
        </td>
      `;
      list.append(tr);
    });
  } catch (err) {
    app.innerHTML = `<p class="error">Không thể tải đơn hàng: ${err.message}</p>`;
  }

  // Xử lý modal chi tiết đơn hàng
  const modal = document.getElementById('orderModal');
  const span = document.getElementsByClassName('close')[0];

  span.onclick = () => {
    modal.style.display = 'none';
  };

  window.onclick = (event) => {
    if (event.target == modal) {
      modal.style.display = 'none';
    }
  };
}

// Hàm xem chi tiết đơn hàng
window.viewOrderDetails = async (id) => {
  const modal = document.getElementById('orderModal');
  const details = document.getElementById('orderDetails');
  
  try {
    const order = await api.getOrder(id);
    const date = new Date(order.created_at).toLocaleString('vi-VN');
    
    details.innerHTML = `
      <div class="order-info">
        <p><strong>Mã đơn hàng:</strong> ${order.id}</p>
        <p><strong>Ngày tạo:</strong> ${date}</p>
        <p><strong>Trạng thái:</strong> <span class="status ${order.status}">${order.status}</span></p>
      </div>
      <div class="order-items">
        <h4>Danh sách thuốc</h4>
        <table>
          <thead>
            <tr>
              <th>Tên thuốc</th>
              <th>Liều lượng</th>
              <th>Số lượng</th>
            </tr>
          </thead>
          <tbody>
            ${order.items.map(item => `
              <tr>
                <td>${item.medication}</td>
                <td>${item.dosage}</td>
                <td>${item.quantity}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    
    modal.style.display = 'block';
  } catch (err) {
    alert('Không thể tải chi tiết đơn hàng: ' + err.message);
  }
};

// Replace your old cancelOrder call:
window.cancelOrder = async (id) => {
  if (!confirm('Bạn có chắc muốn hủy đơn hàng này?')) return;
  try {
    // patch into the /orders/{id}/status/ endpoint
    await api.patchOrderStatus(id, 'cancelled');
    render();
  } catch (err) {
    alert('Không thể hủy đơn hàng: ' + err.message);
  }
};

// user-ui/js/components/profile.js
import { api } from '../api.js';

export async function render() {
  const app = document.getElementById('app');
  app.innerHTML = `
    <section class="card profile-card">
      <h2>Thông tin cá nhân</h2>
      <div class="card-content">
        <form id="profileForm">
          <div class="form-section">
            <h3>Thông tin tài khoản</h3>
            <div class="form-group">
              <label for="username">Tên đăng nhập</label>
              <input id="username" type="text" readonly>
            </div>
            <div class="form-group">
              <label for="fullName">Họ và tên</label>
              <input id="fullName" type="text" placeholder="Nhập họ và tên" required>
            </div>
            <div class="form-group">
              <label for="email">Email</label>
              <input id="email" type="email" placeholder="Nhập email" required>
            </div>
          </div>

          <div class="form-section">
            <h3>Thông tin bệnh nhân</h3>
            <div class="form-group">
              <label for="medicalRecord">Mã hồ sơ bệnh án</label>
              <input id="medicalRecord" type="text" readonly>
            </div>
            <div class="form-group">
              <label for="phone">Số điện thoại</label>
              <input id="phone" type="tel" placeholder="Nhập số điện thoại" pattern="[0-9]{10}" required>
            </div>
            <div class="form-group">
              <label for="dob">Ngày sinh</label>
              <input id="dob" type="date" required>
            </div>
            <div class="form-group">
              <label for="address">Địa chỉ</label>
              <input id="address" type="text" placeholder="Nhập địa chỉ" required>
            </div>
          </div>

          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
            <button type="button" class="btn btn-secondary" onclick="window.location.hash = '/appointments'">Xem lịch hẹn</button>
          </div>
        </form>
      </div>
    </section>
  `;

  try {
    // Lấy thông tin user
    const userData = await api.getCurrentUser();
    document.getElementById('username').value = userData.username || '';
    document.getElementById('fullName').value = userData.full_name || '';
    document.getElementById('email').value = userData.email || '';
    
    // Lấy thông tin patient
    const patientData = await api.getCurrentPatient();
    document.getElementById('medicalRecord').value = patientData.medical_record || '';
    document.getElementById('phone').value = patientData.phone || '';
    document.getElementById('dob').value = patientData.dob || '';
    document.getElementById('address').value = patientData.address || '';

    // Xử lý form submit
    document.getElementById('profileForm').onsubmit = async (e) => {
      e.preventDefault();
      
      try {
        // Cập nhật thông tin user
        const userData = {
          full_name: document.getElementById('fullName').value.trim(),
          email: document.getElementById('email').value.trim()
        };
        await api.updateCurrentUser(userData);

        // Cập nhật thông tin patient
        const patientData = {
          phone: document.getElementById('phone').value.trim(),
          dob: document.getElementById('dob').value,
          address: document.getElementById('address').value.trim()
        };
        await api.updateCurrentPatient(patientData);

        // Hiển thị thông báo thành công
        const successMsg = document.createElement('div');
        successMsg.className = 'alert alert-success';
        successMsg.textContent = 'Cập nhật thông tin thành công!';
        document.querySelector('.form-actions').prepend(successMsg);
        
        // Tự động ẩn thông báo sau 3 giây
        setTimeout(() => successMsg.remove(), 3000);
      } catch (err) {
        // Hiển thị thông báo lỗi
        const errorMsg = document.createElement('div');
        errorMsg.className = 'alert alert-error';
        errorMsg.textContent = 'Cập nhật thất bại: ' + err.message;
        document.querySelector('.form-actions').prepend(errorMsg);
        
        // Tự động ẩn thông báo sau 3 giây
        setTimeout(() => errorMsg.remove(), 3000);
      }
    };
  } catch (err) {
    app.innerHTML = `
      <div class="alert alert-error">
        <p>Không thể tải thông tin cá nhân: ${err.message}</p>
        <button class="btn" onclick="window.location.reload()">Thử lại</button>
      </div>
    `;
  }
}
